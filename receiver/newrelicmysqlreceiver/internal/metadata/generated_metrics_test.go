// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlBlockedSessionsCountDataPoint(ts, 1, "blocked_session_id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlBlockedSessionsWaitTimeDataPoint(ts, 1, "blocked_session_id-val", "blocking_session_id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlBlockingSessionsCountDataPoint(ts, 1, "blocking_session_id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlBufferPoolDataPagesDataPoint(ts, 1, AttributeBufferPoolDataDirty)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlBufferPoolLimitDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlBufferPoolOperationsDataPoint(ts, 1, AttributeBufferPoolOperationsReadAheadRnd)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlBufferPoolPagesDataPoint(ts, 1, AttributeBufferPoolPagesData)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlBufferPoolUsageDataPoint(ts, 1, AttributeBufferPoolDataDirty)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlCommandsDataPoint(ts, 1, AttributeCommandDelete)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlConnectionCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlConnectionErrorsDataPoint(ts, 1, AttributeConnectionErrorAccept)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlHandlersDataPoint(ts, 1, AttributeHandlerCommit)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlIndexIoOperationsDataPoint(ts, 1, "schema_name-val", "table_name-val", "index_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlIndexIoWaitTimeDataPoint(ts, 1, "schema_name-val", "table_name-val", "index_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolReadRequestsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolReadsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbBufferPoolWriteRequestsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataReadDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataReadsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataWritesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlInnodbDataWrittenDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlPerformanceSchemaEventsStatementsTimeDataPoint(ts, 1, "query_digest-val", AttributeQueryTypeSelect)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlPerformanceSchemaEventsStatementsTotalDataPoint(ts, 1, "query_digest-val", AttributeQueryTypeSelect)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlQueryAvgTimeDataPoint(ts, 1, "query_digest-val", AttributeQueryTypeSelect, "schema_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlQueryExecutionCountDataPoint(ts, 1, "query_digest-val", AttributeQueryTypeSelect, "schema_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlQueryLockTimeDataPoint(ts, 1, "query_digest-val", AttributeQueryTypeSelect, "schema_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlQueryMaxTimeDataPoint(ts, 1, "query_digest-val", AttributeQueryTypeSelect, "schema_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlQueryMinTimeDataPoint(ts, 1, "query_digest-val", AttributeQueryTypeSelect, "schema_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlQueryRowsExaminedDataPoint(ts, 1, "query_digest-val", AttributeQueryTypeSelect, "schema_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlQueryRowsSentDataPoint(ts, 1, "query_digest-val", AttributeQueryTypeSelect, "schema_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlQueryTotalTimeDataPoint(ts, 1, "query_digest-val", AttributeQueryTypeSelect, "schema_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlSlaveIoRunningDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlSlaveLagDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlSlaveSQLRunningDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlSlowQueriesCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlSlowQueriesTotalTimeDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlTableIoOperationsDataPoint(ts, 1, "schema_name-val", "table_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlTableIoWaitTimeDataPoint(ts, 1, "schema_name-val", "table_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlWaitEventsCountDataPoint(ts, 1, AttributeWaitEventTypeIo, "wait_event-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMysqlWaitEventsTotalTimeDataPoint(ts, 1, AttributeWaitEventTypeIo, "wait_event-val")

			rb := mb.NewResourceBuilder()
			rb.SetMysqlInstanceEndpoint("mysql.instance.endpoint-val")
			rb.SetMysqlInstanceVersion("mysql.instance.version-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "mysql.blocked_sessions.count":
					assert.False(t, validatedMetrics["mysql.blocked_sessions.count"], "Found a duplicate in the metrics slice: mysql.blocked_sessions.count")
					validatedMetrics["mysql.blocked_sessions.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of blocked sessions.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("blocked_session_id")
					assert.True(t, ok)
					assert.Equal(t, "blocked_session_id-val", attrVal.Str())
				case "mysql.blocked_sessions.wait_time":
					assert.False(t, validatedMetrics["mysql.blocked_sessions.wait_time"], "Found a duplicate in the metrics slice: mysql.blocked_sessions.wait_time")
					validatedMetrics["mysql.blocked_sessions.wait_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time blocked sessions have been waiting.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("blocked_session_id")
					assert.True(t, ok)
					assert.Equal(t, "blocked_session_id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("blocking_session_id")
					assert.True(t, ok)
					assert.Equal(t, "blocking_session_id-val", attrVal.Str())
				case "mysql.blocking_sessions.count":
					assert.False(t, validatedMetrics["mysql.blocking_sessions.count"], "Found a duplicate in the metrics slice: mysql.blocking_sessions.count")
					validatedMetrics["mysql.blocking_sessions.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of blocking sessions.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("blocking_session_id")
					assert.True(t, ok)
					assert.Equal(t, "blocking_session_id-val", attrVal.Str())
				case "mysql.buffer_pool.data_pages":
					assert.False(t, validatedMetrics["mysql.buffer_pool.data_pages"], "Found a duplicate in the metrics slice: mysql.buffer_pool.data_pages")
					validatedMetrics["mysql.buffer_pool.data_pages"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of data pages in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.False(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("status")
					assert.True(t, ok)
					assert.Equal(t, "dirty", attrVal.Str())
				case "mysql.buffer_pool.limit":
					assert.False(t, validatedMetrics["mysql.buffer_pool.limit"], "Found a duplicate in the metrics slice: mysql.buffer_pool.limit")
					validatedMetrics["mysql.buffer_pool.limit"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The configured size of the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.buffer_pool.operations":
					assert.False(t, validatedMetrics["mysql.buffer_pool.operations"], "Found a duplicate in the metrics slice: mysql.buffer_pool.operations")
					validatedMetrics["mysql.buffer_pool.operations"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of operations on the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("operation")
					assert.True(t, ok)
					assert.Equal(t, "read_ahead_rnd", attrVal.Str())
				case "mysql.buffer_pool.pages":
					assert.False(t, validatedMetrics["mysql.buffer_pool.pages"], "Found a duplicate in the metrics slice: mysql.buffer_pool.pages")
					validatedMetrics["mysql.buffer_pool.pages"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of pages in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.Equal(t, "data", attrVal.Str())
				case "mysql.buffer_pool.usage":
					assert.False(t, validatedMetrics["mysql.buffer_pool.usage"], "Found a duplicate in the metrics slice: mysql.buffer_pool.usage")
					validatedMetrics["mysql.buffer_pool.usage"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of bytes in the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.False(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("status")
					assert.True(t, ok)
					assert.Equal(t, "dirty", attrVal.Str())
				case "mysql.commands":
					assert.False(t, validatedMetrics["mysql.commands"], "Found a duplicate in the metrics slice: mysql.commands")
					validatedMetrics["mysql.commands"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of times each type of command has been executed.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("command")
					assert.True(t, ok)
					assert.Equal(t, "delete", attrVal.Str())
				case "mysql.connection.count":
					assert.False(t, validatedMetrics["mysql.connection.count"], "Found a duplicate in the metrics slice: mysql.connection.count")
					validatedMetrics["mysql.connection.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of connection attempts to the MySQL server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.connection.errors":
					assert.False(t, validatedMetrics["mysql.connection.errors"], "Found a duplicate in the metrics slice: mysql.connection.errors")
					validatedMetrics["mysql.connection.errors"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of failed connections to the MySQL server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("error")
					assert.True(t, ok)
					assert.Equal(t, "accept", attrVal.Str())
				case "mysql.handlers":
					assert.False(t, validatedMetrics["mysql.handlers"], "Found a duplicate in the metrics slice: mysql.handlers")
					validatedMetrics["mysql.handlers"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of requests to various MySQL handlers.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("kind")
					assert.True(t, ok)
					assert.Equal(t, "commit", attrVal.Str())
				case "mysql.index_io.operations":
					assert.False(t, validatedMetrics["mysql.index_io.operations"], "Found a duplicate in the metrics slice: mysql.index_io.operations")
					validatedMetrics["mysql.index_io.operations"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of index I/O operations.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table_name")
					assert.True(t, ok)
					assert.Equal(t, "table_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("index_name")
					assert.True(t, ok)
					assert.Equal(t, "index_name-val", attrVal.Str())
				case "mysql.index_io.wait_time":
					assert.False(t, validatedMetrics["mysql.index_io.wait_time"], "Found a duplicate in the metrics slice: mysql.index_io.wait_time")
					validatedMetrics["mysql.index_io.wait_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total time spent waiting for index I/O operations.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table_name")
					assert.True(t, ok)
					assert.Equal(t, "table_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("index_name")
					assert.True(t, ok)
					assert.Equal(t, "index_name-val", attrVal.Str())
				case "mysql.innodb.buffer_pool_read_requests":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_read_requests"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_read_requests")
					validatedMetrics["mysql.innodb.buffer_pool_read_requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of logical read requests to the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_reads":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_reads"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_reads")
					validatedMetrics["mysql.innodb.buffer_pool_reads"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of reads that InnoDB could not satisfy from the buffer pool.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.buffer_pool_write_requests":
					assert.False(t, validatedMetrics["mysql.innodb.buffer_pool_write_requests"], "Found a duplicate in the metrics slice: mysql.innodb.buffer_pool_write_requests")
					validatedMetrics["mysql.innodb.buffer_pool_write_requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of writes done to the InnoDB buffer pool.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_read":
					assert.False(t, validatedMetrics["mysql.innodb.data_read"], "Found a duplicate in the metrics slice: mysql.innodb.data_read")
					validatedMetrics["mysql.innodb.data_read"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of data read by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_reads":
					assert.False(t, validatedMetrics["mysql.innodb.data_reads"], "Found a duplicate in the metrics slice: mysql.innodb.data_reads")
					validatedMetrics["mysql.innodb.data_reads"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of data reads by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_writes":
					assert.False(t, validatedMetrics["mysql.innodb.data_writes"], "Found a duplicate in the metrics slice: mysql.innodb.data_writes")
					validatedMetrics["mysql.innodb.data_writes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of data writes by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.innodb.data_written":
					assert.False(t, validatedMetrics["mysql.innodb.data_written"], "Found a duplicate in the metrics slice: mysql.innodb.data_written")
					validatedMetrics["mysql.innodb.data_written"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Amount of data written by InnoDB.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.performance_schema.events_statements_time":
					assert.False(t, validatedMetrics["mysql.performance_schema.events_statements_time"], "Found a duplicate in the metrics slice: mysql.performance_schema.events_statements_time")
					validatedMetrics["mysql.performance_schema.events_statements_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total time of statement events.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("query_digest")
					assert.True(t, ok)
					assert.Equal(t, "query_digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.Equal(t, "select", attrVal.Str())
				case "mysql.performance_schema.events_statements_total":
					assert.False(t, validatedMetrics["mysql.performance_schema.events_statements_total"], "Found a duplicate in the metrics slice: mysql.performance_schema.events_statements_total")
					validatedMetrics["mysql.performance_schema.events_statements_total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total number of statement events.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("query_digest")
					assert.True(t, ok)
					assert.Equal(t, "query_digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.Equal(t, "select", attrVal.Str())
				case "mysql.query.avg_time":
					assert.False(t, validatedMetrics["mysql.query.avg_time"], "Found a duplicate in the metrics slice: mysql.query.avg_time")
					validatedMetrics["mysql.query.avg_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average execution time for this query type.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("query_digest")
					assert.True(t, ok)
					assert.Equal(t, "query_digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.Equal(t, "select", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
				case "mysql.query.execution_count":
					assert.False(t, validatedMetrics["mysql.query.execution_count"], "Found a duplicate in the metrics slice: mysql.query.execution_count")
					validatedMetrics["mysql.query.execution_count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of times a query has been executed.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("query_digest")
					assert.True(t, ok)
					assert.Equal(t, "query_digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.Equal(t, "select", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
				case "mysql.query.lock_time":
					assert.False(t, validatedMetrics["mysql.query.lock_time"], "Found a duplicate in the metrics slice: mysql.query.lock_time")
					validatedMetrics["mysql.query.lock_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total time spent waiting for locks for this query type.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("query_digest")
					assert.True(t, ok)
					assert.Equal(t, "query_digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.Equal(t, "select", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
				case "mysql.query.max_time":
					assert.False(t, validatedMetrics["mysql.query.max_time"], "Found a duplicate in the metrics slice: mysql.query.max_time")
					validatedMetrics["mysql.query.max_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Maximum execution time for this query type.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("query_digest")
					assert.True(t, ok)
					assert.Equal(t, "query_digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.Equal(t, "select", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
				case "mysql.query.min_time":
					assert.False(t, validatedMetrics["mysql.query.min_time"], "Found a duplicate in the metrics slice: mysql.query.min_time")
					validatedMetrics["mysql.query.min_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Minimum execution time for this query type.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("query_digest")
					assert.True(t, ok)
					assert.Equal(t, "query_digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.Equal(t, "select", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
				case "mysql.query.rows_examined":
					assert.False(t, validatedMetrics["mysql.query.rows_examined"], "Found a duplicate in the metrics slice: mysql.query.rows_examined")
					validatedMetrics["mysql.query.rows_examined"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total number of rows examined by this query type.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("query_digest")
					assert.True(t, ok)
					assert.Equal(t, "query_digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.Equal(t, "select", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
				case "mysql.query.rows_sent":
					assert.False(t, validatedMetrics["mysql.query.rows_sent"], "Found a duplicate in the metrics slice: mysql.query.rows_sent")
					validatedMetrics["mysql.query.rows_sent"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total number of rows sent by this query type.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("query_digest")
					assert.True(t, ok)
					assert.Equal(t, "query_digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.Equal(t, "select", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
				case "mysql.query.total_time":
					assert.False(t, validatedMetrics["mysql.query.total_time"], "Found a duplicate in the metrics slice: mysql.query.total_time")
					validatedMetrics["mysql.query.total_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total time spent executing queries of this type.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("query_digest")
					assert.True(t, ok)
					assert.Equal(t, "query_digest-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.Equal(t, "select", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
				case "mysql.slave_io_running":
					assert.False(t, validatedMetrics["mysql.slave_io_running"], "Found a duplicate in the metrics slice: mysql.slave_io_running")
					validatedMetrics["mysql.slave_io_running"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Whether the I/O thread is running on the replica.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.slave_lag":
					assert.False(t, validatedMetrics["mysql.slave_lag"], "Found a duplicate in the metrics slice: mysql.slave_lag")
					validatedMetrics["mysql.slave_lag"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of seconds that the replica must lag the source.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.slave_sql_running":
					assert.False(t, validatedMetrics["mysql.slave_sql_running"], "Found a duplicate in the metrics slice: mysql.slave_sql_running")
					validatedMetrics["mysql.slave_sql_running"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Whether the SQL thread is running on the replica.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.slow_queries.count":
					assert.False(t, validatedMetrics["mysql.slow_queries.count"], "Found a duplicate in the metrics slice: mysql.slow_queries.count")
					validatedMetrics["mysql.slow_queries.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of slow queries.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "mysql.slow_queries.total_time":
					assert.False(t, validatedMetrics["mysql.slow_queries.total_time"], "Found a duplicate in the metrics slice: mysql.slow_queries.total_time")
					validatedMetrics["mysql.slow_queries.total_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total time spent on slow queries.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "mysql.table_io.operations":
					assert.False(t, validatedMetrics["mysql.table_io.operations"], "Found a duplicate in the metrics slice: mysql.table_io.operations")
					validatedMetrics["mysql.table_io.operations"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of table I/O operations.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table_name")
					assert.True(t, ok)
					assert.Equal(t, "table_name-val", attrVal.Str())
				case "mysql.table_io.wait_time":
					assert.False(t, validatedMetrics["mysql.table_io.wait_time"], "Found a duplicate in the metrics slice: mysql.table_io.wait_time")
					validatedMetrics["mysql.table_io.wait_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total time spent waiting for table I/O operations.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.Equal(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("table_name")
					assert.True(t, ok)
					assert.Equal(t, "table_name-val", attrVal.Str())
				case "mysql.wait_events.count":
					assert.False(t, validatedMetrics["mysql.wait_events.count"], "Found a duplicate in the metrics slice: mysql.wait_events.count")
					validatedMetrics["mysql.wait_events.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of wait events.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("wait_event_type")
					assert.True(t, ok)
					assert.Equal(t, "io", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait_event")
					assert.True(t, ok)
					assert.Equal(t, "wait_event-val", attrVal.Str())
				case "mysql.wait_events.total_time":
					assert.False(t, validatedMetrics["mysql.wait_events.total_time"], "Found a duplicate in the metrics slice: mysql.wait_events.total_time")
					validatedMetrics["mysql.wait_events.total_time"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total time spent waiting for events.", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("wait_event_type")
					assert.True(t, ok)
					assert.Equal(t, "io", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait_event")
					assert.True(t, ok)
					assert.Equal(t, "wait_event-val", attrVal.Str())
				}
			}
		})
	}
}
