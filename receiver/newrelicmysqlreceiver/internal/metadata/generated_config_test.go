// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"

	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					MysqlBlockedSessionsCount:                   MetricConfig{Enabled: true},
					MysqlBlockedSessionsWaitTime:                MetricConfig{Enabled: true},
					MysqlBlockingSessionsCount:                  MetricConfig{Enabled: true},
					MysqlBufferPoolDataPages:                    MetricConfig{Enabled: true},
					MysqlBufferPoolLimit:                        MetricConfig{Enabled: true},
					MysqlBufferPoolOperations:                   MetricConfig{Enabled: true},
					MysqlBufferPoolPages:                        MetricConfig{Enabled: true},
					MysqlBufferPoolUsage:                        MetricConfig{Enabled: true},
					MysqlCommands:                               MetricConfig{Enabled: true},
					MysqlConnectionCount:                        MetricConfig{Enabled: true},
					MysqlConnectionErrors:                       MetricConfig{Enabled: true},
					MysqlHandlers:                               MetricConfig{Enabled: true},
					MysqlIndexIoOperations:                      MetricConfig{Enabled: true},
					MysqlIndexIoWaitTime:                        MetricConfig{Enabled: true},
					MysqlInnodbBufferPoolReadRequests:           MetricConfig{Enabled: true},
					MysqlInnodbBufferPoolReads:                  MetricConfig{Enabled: true},
					MysqlInnodbBufferPoolWriteRequests:          MetricConfig{Enabled: true},
					MysqlInnodbDataRead:                         MetricConfig{Enabled: true},
					MysqlInnodbDataReads:                        MetricConfig{Enabled: true},
					MysqlInnodbDataWrites:                       MetricConfig{Enabled: true},
					MysqlInnodbDataWritten:                      MetricConfig{Enabled: true},
					MysqlPerformanceSchemaEventsStatementsTime:  MetricConfig{Enabled: true},
					MysqlPerformanceSchemaEventsStatementsTotal: MetricConfig{Enabled: true},
					MysqlQueryAvgTime:                           MetricConfig{Enabled: true},
					MysqlQueryExecutionCount:                    MetricConfig{Enabled: true},
					MysqlQueryLockTime:                          MetricConfig{Enabled: true},
					MysqlQueryMaxTime:                           MetricConfig{Enabled: true},
					MysqlQueryMinTime:                           MetricConfig{Enabled: true},
					MysqlQueryRowsExamined:                      MetricConfig{Enabled: true},
					MysqlQueryRowsSent:                          MetricConfig{Enabled: true},
					MysqlQueryTotalTime:                         MetricConfig{Enabled: true},
					MysqlSlaveIoRunning:                         MetricConfig{Enabled: true},
					MysqlSlaveLag:                               MetricConfig{Enabled: true},
					MysqlSlaveSQLRunning:                        MetricConfig{Enabled: true},
					MysqlSlowQueriesCount:                       MetricConfig{Enabled: true},
					MysqlSlowQueriesTotalTime:                   MetricConfig{Enabled: true},
					MysqlTableIoOperations:                      MetricConfig{Enabled: true},
					MysqlTableIoWaitTime:                        MetricConfig{Enabled: true},
					MysqlWaitEventsCount:                        MetricConfig{Enabled: true},
					MysqlWaitEventsTotalTime:                    MetricConfig{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesConfig{
					MysqlInstanceEndpoint: ResourceAttributeConfig{Enabled: true},
					MysqlInstanceVersion:  ResourceAttributeConfig{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					MysqlBlockedSessionsCount:                   MetricConfig{Enabled: false},
					MysqlBlockedSessionsWaitTime:                MetricConfig{Enabled: false},
					MysqlBlockingSessionsCount:                  MetricConfig{Enabled: false},
					MysqlBufferPoolDataPages:                    MetricConfig{Enabled: false},
					MysqlBufferPoolLimit:                        MetricConfig{Enabled: false},
					MysqlBufferPoolOperations:                   MetricConfig{Enabled: false},
					MysqlBufferPoolPages:                        MetricConfig{Enabled: false},
					MysqlBufferPoolUsage:                        MetricConfig{Enabled: false},
					MysqlCommands:                               MetricConfig{Enabled: false},
					MysqlConnectionCount:                        MetricConfig{Enabled: false},
					MysqlConnectionErrors:                       MetricConfig{Enabled: false},
					MysqlHandlers:                               MetricConfig{Enabled: false},
					MysqlIndexIoOperations:                      MetricConfig{Enabled: false},
					MysqlIndexIoWaitTime:                        MetricConfig{Enabled: false},
					MysqlInnodbBufferPoolReadRequests:           MetricConfig{Enabled: false},
					MysqlInnodbBufferPoolReads:                  MetricConfig{Enabled: false},
					MysqlInnodbBufferPoolWriteRequests:          MetricConfig{Enabled: false},
					MysqlInnodbDataRead:                         MetricConfig{Enabled: false},
					MysqlInnodbDataReads:                        MetricConfig{Enabled: false},
					MysqlInnodbDataWrites:                       MetricConfig{Enabled: false},
					MysqlInnodbDataWritten:                      MetricConfig{Enabled: false},
					MysqlPerformanceSchemaEventsStatementsTime:  MetricConfig{Enabled: false},
					MysqlPerformanceSchemaEventsStatementsTotal: MetricConfig{Enabled: false},
					MysqlQueryAvgTime:                           MetricConfig{Enabled: false},
					MysqlQueryExecutionCount:                    MetricConfig{Enabled: false},
					MysqlQueryLockTime:                          MetricConfig{Enabled: false},
					MysqlQueryMaxTime:                           MetricConfig{Enabled: false},
					MysqlQueryMinTime:                           MetricConfig{Enabled: false},
					MysqlQueryRowsExamined:                      MetricConfig{Enabled: false},
					MysqlQueryRowsSent:                          MetricConfig{Enabled: false},
					MysqlQueryTotalTime:                         MetricConfig{Enabled: false},
					MysqlSlaveIoRunning:                         MetricConfig{Enabled: false},
					MysqlSlaveLag:                               MetricConfig{Enabled: false},
					MysqlSlaveSQLRunning:                        MetricConfig{Enabled: false},
					MysqlSlowQueriesCount:                       MetricConfig{Enabled: false},
					MysqlSlowQueriesTotalTime:                   MetricConfig{Enabled: false},
					MysqlTableIoOperations:                      MetricConfig{Enabled: false},
					MysqlTableIoWaitTime:                        MetricConfig{Enabled: false},
					MysqlWaitEventsCount:                        MetricConfig{Enabled: false},
					MysqlWaitEventsTotalTime:                    MetricConfig{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesConfig{
					MysqlInstanceEndpoint: ResourceAttributeConfig{Enabled: false},
					MysqlInstanceVersion:  ResourceAttributeConfig{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricConfig{}, ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg, confmap.WithIgnoreUnused()))
	return cfg
}

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesConfig
	}{
		{
			name: "default",
			want: DefaultResourceAttributesConfig(),
		},
		{
			name: "all_set",
			want: ResourceAttributesConfig{
				MysqlInstanceEndpoint: ResourceAttributeConfig{Enabled: true},
				MysqlInstanceVersion:  ResourceAttributeConfig{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesConfig{
				MysqlInstanceEndpoint: ResourceAttributeConfig{Enabled: false},
				MysqlInstanceVersion:  ResourceAttributeConfig{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadResourceAttributesConfig(t *testing.T, name string) ResourceAttributesConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesConfig()
	require.NoError(t, sub.Unmarshal(&cfg))
	return cfg
}
