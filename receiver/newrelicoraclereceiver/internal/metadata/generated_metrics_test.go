// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConcurrencyEnqueueRoFastObjectReuseDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConcurrencyReadByOtherSessionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbIoControlFileParallelWriteDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbIoControlFileSequentialReadDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbIoDataFileInitWriteDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbIoDbFileScatteredReadDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbIoDbFileSequentialReadDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbIoDiskFileOperationsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbIoLocalWriteWaitDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbLockedAccountsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogLogFileSwitchDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogLogFileSwitchArchivingNeededDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogLogFileSwitchCheckpointIncompleteDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogSyncDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSessionsCountDataPoint(ts, 1, "newrelic.entity_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaBufferBusyWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaFreeBufferInspectedDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaFreeBufferWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSynchronizationDirectPathSyncDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceDbIDDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceGlobalNameDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceIsOfflineDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceOfflineCdbDatafilesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceOfflinePdbDatafilesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespacePdbNonWriteModeDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceConsumedBytesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceReservedBytesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceUsedPercentageDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			rb := mb.NewResourceBuilder()
			rb.SetHostName("host.name-val")
			rb.SetNewrelicoracledbInstanceName("newrelicoracledb.instance.name-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "newrelicoracledb.concurrency.enqueue_ro_fast_object_reuse":
					assert.False(t, validatedMetrics["newrelicoracledb.concurrency.enqueue_ro_fast_object_reuse"], "Found a duplicate in the metrics slice: newrelicoracledb.concurrency.enqueue_ro_fast_object_reuse")
					validatedMetrics["newrelicoracledb.concurrency.enqueue_ro_fast_object_reuse"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for enqueue RO fast object reuse events", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.concurrency.read_by_other_session":
					assert.False(t, validatedMetrics["newrelicoracledb.concurrency.read_by_other_session"], "Found a duplicate in the metrics slice: newrelicoracledb.concurrency.read_by_other_session")
					validatedMetrics["newrelicoracledb.concurrency.read_by_other_session"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for read by other session events", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.io.control_file_parallel_write":
					assert.False(t, validatedMetrics["newrelicoracledb.io.control_file_parallel_write"], "Found a duplicate in the metrics slice: newrelicoracledb.io.control_file_parallel_write")
					validatedMetrics["newrelicoracledb.io.control_file_parallel_write"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for control file parallel write operations", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.io.control_file_sequential_read":
					assert.False(t, validatedMetrics["newrelicoracledb.io.control_file_sequential_read"], "Found a duplicate in the metrics slice: newrelicoracledb.io.control_file_sequential_read")
					validatedMetrics["newrelicoracledb.io.control_file_sequential_read"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for control file sequential read operations", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.io.data_file_init_write":
					assert.False(t, validatedMetrics["newrelicoracledb.io.data_file_init_write"], "Found a duplicate in the metrics slice: newrelicoracledb.io.data_file_init_write")
					validatedMetrics["newrelicoracledb.io.data_file_init_write"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for data file initialization write operations", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.io.db_file_scattered_read":
					assert.False(t, validatedMetrics["newrelicoracledb.io.db_file_scattered_read"], "Found a duplicate in the metrics slice: newrelicoracledb.io.db_file_scattered_read")
					validatedMetrics["newrelicoracledb.io.db_file_scattered_read"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for database file scattered read operations", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.io.db_file_sequential_read":
					assert.False(t, validatedMetrics["newrelicoracledb.io.db_file_sequential_read"], "Found a duplicate in the metrics slice: newrelicoracledb.io.db_file_sequential_read")
					validatedMetrics["newrelicoracledb.io.db_file_sequential_read"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for database file sequential read operations", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.io.disk_file_operations":
					assert.False(t, validatedMetrics["newrelicoracledb.io.disk_file_operations"], "Found a duplicate in the metrics slice: newrelicoracledb.io.disk_file_operations")
					validatedMetrics["newrelicoracledb.io.disk_file_operations"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for disk file operations I/O", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.io.local_write_wait":
					assert.False(t, validatedMetrics["newrelicoracledb.io.local_write_wait"], "Found a duplicate in the metrics slice: newrelicoracledb.io.local_write_wait")
					validatedMetrics["newrelicoracledb.io.local_write_wait"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for local write operations", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.locked_accounts":
					assert.False(t, validatedMetrics["newrelicoracledb.locked_accounts"], "Found a duplicate in the metrics slice: newrelicoracledb.locked_accounts")
					validatedMetrics["newrelicoracledb.locked_accounts"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of locked user accounts in the database", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log.log_file_switch":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log.log_file_switch"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log.log_file_switch")
					validatedMetrics["newrelicoracledb.redo_log.log_file_switch"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for log file switch completion events", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log.log_file_switch_archiving_needed":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log.log_file_switch_archiving_needed"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log.log_file_switch_archiving_needed")
					validatedMetrics["newrelicoracledb.redo_log.log_file_switch_archiving_needed"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for log file switch archiving needed events", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log.log_file_switch_checkpoint_incomplete":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log.log_file_switch_checkpoint_incomplete"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log.log_file_switch_checkpoint_incomplete")
					validatedMetrics["newrelicoracledb.redo_log.log_file_switch_checkpoint_incomplete"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for log file switch checkpoint incomplete events", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log.sync":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log.sync"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log.sync")
					validatedMetrics["newrelicoracledb.redo_log.sync"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for log file sync events", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log.waits":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log.waits"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log.waits")
					validatedMetrics["newrelicoracledb.redo_log.waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for log file parallel write events", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sessions.count":
					assert.False(t, validatedMetrics["newrelicoracledb.sessions.count"], "Found a duplicate in the metrics slice: newrelicoracledb.sessions.count")
					validatedMetrics["newrelicoracledb.sessions.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of active Oracle database sessions", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
				case "newrelicoracledb.sga.buffer_busy_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga.buffer_busy_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga.buffer_busy_waits")
					validatedMetrics["newrelicoracledb.sga.buffer_busy_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total buffer busy waits", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga.free_buffer_inspected":
					assert.False(t, validatedMetrics["newrelicoracledb.sga.free_buffer_inspected"], "Found a duplicate in the metrics slice: newrelicoracledb.sga.free_buffer_inspected")
					validatedMetrics["newrelicoracledb.sga.free_buffer_inspected"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total free buffer inspected events", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga.free_buffer_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga.free_buffer_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga.free_buffer_waits")
					validatedMetrics["newrelicoracledb.sga.free_buffer_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total free buffer waits", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.synchronization.direct_path_sync":
					assert.False(t, validatedMetrics["newrelicoracledb.synchronization.direct_path_sync"], "Found a duplicate in the metrics slice: newrelicoracledb.synchronization.direct_path_sync")
					validatedMetrics["newrelicoracledb.synchronization.direct_path_sync"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total waits for direct path sync operations", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.tablespace.db_id":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.db_id"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.db_id")
					validatedMetrics["newrelicoracledb.tablespace.db_id"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database ID information for tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.global_name":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.global_name"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.global_name")
					validatedMetrics["newrelicoracledb.tablespace.global_name"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global name information for tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.is_offline":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.is_offline"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.is_offline")
					validatedMetrics["newrelicoracledb.tablespace.is_offline"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Whether the tablespace is offline (1) or online (0)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.offline_cdb_datafiles":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.offline_cdb_datafiles"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.offline_cdb_datafiles")
					validatedMetrics["newrelicoracledb.tablespace.offline_cdb_datafiles"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of offline CDB datafiles by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.offline_pdb_datafiles":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.offline_pdb_datafiles"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.offline_pdb_datafiles")
					validatedMetrics["newrelicoracledb.tablespace.offline_pdb_datafiles"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of offline PDB datafiles by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.pdb_non_write_mode":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.pdb_non_write_mode"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.pdb_non_write_mode")
					validatedMetrics["newrelicoracledb.tablespace.pdb_non_write_mode"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of PDB datafiles in non-write mode by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_consumed_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_consumed_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_consumed_bytes")
					validatedMetrics["newrelicoracledb.tablespace.space_consumed_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total bytes consumed by the tablespace", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_reserved_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_reserved_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_reserved_bytes")
					validatedMetrics["newrelicoracledb.tablespace.space_reserved_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total bytes reserved by the tablespace", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_used_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_used_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_used_percentage")
					validatedMetrics["newrelicoracledb.tablespace.space_used_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Percentage of tablespace space currently used", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				}
			}
		})
	}
}
