// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCPUUsagePerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCPUUsagePerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbDatabaseCPUTimeRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbDatabaseWaitTimeRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbExecutionsPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbExecutionsPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbNetworkTrafficVolumePerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbPhysicalReadsBytesPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbResponseTimeSQLServiceDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSessionsActiveParallelDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSessionsActiveSerialDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSessionsAverageActiveDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSessionsCountDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSessionsCurrentLogonsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSessionsCurrentOpenCursorsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbTransactionsPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogLogFileSwitchDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogLogFileSwitchArchivingNeededDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogLogFileSwitchCheckpointIncompleteDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRollbackSegmentsGetsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRollbackSegmentsRatioWaitDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRollbackSegmentsWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSessionsCountDataPoint(ts, 1, "newrelic.entity_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaBufferBusyWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaFreeBufferInspectedDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaFreeBufferWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			rb := mb.NewResourceBuilder()
			rb.SetHostName("host.name-val")
			rb.SetNewrelicoracledbInstanceName("newrelicoracledb.instance.name-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "newrelicoracledb.pdb.cpu.usage_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.cpu.usage_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.cpu.usage_per_second")
					validatedMetrics["newrelicoracledb.pdb.cpu.usage_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU Usage Per Second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.cpu.usage_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.cpu.usage_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.cpu.usage_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.cpu.usage_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU Usage Per Transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.database.cpu_time_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.database.cpu_time_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.database.cpu_time_ratio")
					validatedMetrics["newrelicoracledb.pdb.database.cpu_time_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database CPU Time Ratio in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.database.wait_time_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.database.wait_time_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.database.wait_time_ratio")
					validatedMetrics["newrelicoracledb.pdb.database.wait_time_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database Wait Time Ratio in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.executions.per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.executions.per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.executions.per_second")
					validatedMetrics["newrelicoracledb.pdb.executions.per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Executions Per Second in PDB", ms.At(i).Description())
					assert.Equal(t, "{executions}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.executions.per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.executions.per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.executions.per_transaction")
					validatedMetrics["newrelicoracledb.pdb.executions.per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Executions Per Transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "{executions}/{transaction}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.network.traffic_volume_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.network.traffic_volume_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.network.traffic_volume_per_second")
					validatedMetrics["newrelicoracledb.pdb.network.traffic_volume_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Network Traffic Volume Per Second in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.physical_reads.bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.physical_reads.bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.physical_reads.bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.physical_reads.bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Read Total Bytes Per Second in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.response_time.sql_service":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.response_time.sql_service"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.response_time.sql_service")
					validatedMetrics["newrelicoracledb.pdb.response_time.sql_service"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SQL Service Response Time in PDB", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.sessions.active_parallel":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.sessions.active_parallel"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.sessions.active_parallel")
					validatedMetrics["newrelicoracledb.pdb.sessions.active_parallel"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Active Parallel Sessions in PDB", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.sessions.active_serial":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.sessions.active_serial"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.sessions.active_serial")
					validatedMetrics["newrelicoracledb.pdb.sessions.active_serial"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Active Serial Sessions in PDB", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.sessions.average_active":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.sessions.average_active"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.sessions.average_active")
					validatedMetrics["newrelicoracledb.pdb.sessions.average_active"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average Active Sessions in PDB", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.sessions.count":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.sessions.count"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.sessions.count")
					validatedMetrics["newrelicoracledb.pdb.sessions.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Session Count in PDB", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.sessions.current_logons":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.sessions.current_logons"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.sessions.current_logons")
					validatedMetrics["newrelicoracledb.pdb.sessions.current_logons"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current Logons Count in PDB", ms.At(i).Description())
					assert.Equal(t, "{logons}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.sessions.current_open_cursors":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.sessions.current_open_cursors"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.sessions.current_open_cursors")
					validatedMetrics["newrelicoracledb.pdb.sessions.current_open_cursors"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current Open Cursors Count in PDB", ms.At(i).Description())
					assert.Equal(t, "{cursors}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.transactions.per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.transactions.per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.transactions.per_second")
					validatedMetrics["newrelicoracledb.pdb.transactions.per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Transaction Per Second in PDB", ms.At(i).Description())
					assert.Equal(t, "{transactions}/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log.log_file_switch":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log.log_file_switch"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log.log_file_switch")
					validatedMetrics["newrelicoracledb.redo_log.log_file_switch"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Log file switch completion waits", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log.log_file_switch_archiving_needed":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log.log_file_switch_archiving_needed"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log.log_file_switch_archiving_needed")
					validatedMetrics["newrelicoracledb.redo_log.log_file_switch_archiving_needed"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Log file switch (archiving needed) waits", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log.log_file_switch_checkpoint_incomplete":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log.log_file_switch_checkpoint_incomplete"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log.log_file_switch_checkpoint_incomplete")
					validatedMetrics["newrelicoracledb.redo_log.log_file_switch_checkpoint_incomplete"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Log file switch (checkpoint incomplete) waits", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log.waits":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log.waits"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log.waits")
					validatedMetrics["newrelicoracledb.redo_log.waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Log file parallel write waits", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rollback_segments.gets":
					assert.False(t, validatedMetrics["newrelicoracledb.rollback_segments.gets"], "Found a duplicate in the metrics slice: newrelicoracledb.rollback_segments.gets")
					validatedMetrics["newrelicoracledb.rollback_segments.gets"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of gets on rollback segment headers", ms.At(i).Description())
					assert.Equal(t, "{gets}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rollback_segments.ratio_wait":
					assert.False(t, validatedMetrics["newrelicoracledb.rollback_segments.ratio_wait"], "Found a duplicate in the metrics slice: newrelicoracledb.rollback_segments.ratio_wait")
					validatedMetrics["newrelicoracledb.rollback_segments.ratio_wait"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Ratio of waits to gets on rollback segment headers", ms.At(i).Description())
					assert.Equal(t, "{ratio}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rollback_segments.waits":
					assert.False(t, validatedMetrics["newrelicoracledb.rollback_segments.waits"], "Found a duplicate in the metrics slice: newrelicoracledb.rollback_segments.waits")
					validatedMetrics["newrelicoracledb.rollback_segments.waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits on rollback segment headers", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sessions.count":
					assert.False(t, validatedMetrics["newrelicoracledb.sessions.count"], "Found a duplicate in the metrics slice: newrelicoracledb.sessions.count")
					validatedMetrics["newrelicoracledb.sessions.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of active Oracle database sessions", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
				case "newrelicoracledb.sga.buffer_busy_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga.buffer_busy_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga.buffer_busy_waits")
					validatedMetrics["newrelicoracledb.sga.buffer_busy_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Buffer busy waits", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga.free_buffer_inspected":
					assert.False(t, validatedMetrics["newrelicoracledb.sga.free_buffer_inspected"], "Found a duplicate in the metrics slice: newrelicoracledb.sga.free_buffer_inspected")
					validatedMetrics["newrelicoracledb.sga.free_buffer_inspected"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Free buffer inspected waits", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga.free_buffer_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga.free_buffer_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga.free_buffer_waits")
					validatedMetrics["newrelicoracledb.sga.free_buffer_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Free buffer waits", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				}
			}
		})
	}
}
