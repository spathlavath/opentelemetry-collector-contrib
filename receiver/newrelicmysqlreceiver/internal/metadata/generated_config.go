// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/filter"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for newrelicmysql metrics.
type MetricsConfig struct {
	MysqlBlockedSessionsCount                   MetricConfig `mapstructure:"mysql.blocked_sessions.count"`
	MysqlBlockedSessionsWaitTime                MetricConfig `mapstructure:"mysql.blocked_sessions.wait_time"`
	MysqlBlockingSessionsCount                  MetricConfig `mapstructure:"mysql.blocking_sessions.count"`
	MysqlBufferPoolDataPages                    MetricConfig `mapstructure:"mysql.buffer_pool.data_pages"`
	MysqlBufferPoolLimit                        MetricConfig `mapstructure:"mysql.buffer_pool.limit"`
	MysqlBufferPoolOperations                   MetricConfig `mapstructure:"mysql.buffer_pool.operations"`
	MysqlBufferPoolPages                        MetricConfig `mapstructure:"mysql.buffer_pool.pages"`
	MysqlBufferPoolUsage                        MetricConfig `mapstructure:"mysql.buffer_pool.usage"`
	MysqlCommands                               MetricConfig `mapstructure:"mysql.commands"`
	MysqlConnectionCount                        MetricConfig `mapstructure:"mysql.connection.count"`
	MysqlConnectionErrors                       MetricConfig `mapstructure:"mysql.connection.errors"`
	MysqlHandlers                               MetricConfig `mapstructure:"mysql.handlers"`
	MysqlIndexIoOperations                      MetricConfig `mapstructure:"mysql.index_io.operations"`
	MysqlIndexIoWaitTime                        MetricConfig `mapstructure:"mysql.index_io.wait_time"`
	MysqlInnodbBufferPoolReadRequests           MetricConfig `mapstructure:"mysql.innodb.buffer_pool_read_requests"`
	MysqlInnodbBufferPoolReads                  MetricConfig `mapstructure:"mysql.innodb.buffer_pool_reads"`
	MysqlInnodbBufferPoolWriteRequests          MetricConfig `mapstructure:"mysql.innodb.buffer_pool_write_requests"`
	MysqlInnodbDataRead                         MetricConfig `mapstructure:"mysql.innodb.data_read"`
	MysqlInnodbDataReads                        MetricConfig `mapstructure:"mysql.innodb.data_reads"`
	MysqlInnodbDataWrites                       MetricConfig `mapstructure:"mysql.innodb.data_writes"`
	MysqlInnodbDataWritten                      MetricConfig `mapstructure:"mysql.innodb.data_written"`
	MysqlPerformanceSchemaEventsStatementsTime  MetricConfig `mapstructure:"mysql.performance_schema.events_statements_time"`
	MysqlPerformanceSchemaEventsStatementsTotal MetricConfig `mapstructure:"mysql.performance_schema.events_statements_total"`
	MysqlQueryAvgTime                           MetricConfig `mapstructure:"mysql.query.avg_time"`
	MysqlQueryExecutionCount                    MetricConfig `mapstructure:"mysql.query.execution_count"`
	MysqlQueryLockTime                          MetricConfig `mapstructure:"mysql.query.lock_time"`
	MysqlQueryMaxTime                           MetricConfig `mapstructure:"mysql.query.max_time"`
	MysqlQueryMinTime                           MetricConfig `mapstructure:"mysql.query.min_time"`
	MysqlQueryRowsExamined                      MetricConfig `mapstructure:"mysql.query.rows_examined"`
	MysqlQueryRowsSent                          MetricConfig `mapstructure:"mysql.query.rows_sent"`
	MysqlQueryTotalTime                         MetricConfig `mapstructure:"mysql.query.total_time"`
	MysqlSlaveIoRunning                         MetricConfig `mapstructure:"mysql.slave_io_running"`
	MysqlSlaveLag                               MetricConfig `mapstructure:"mysql.slave_lag"`
	MysqlSlaveSQLRunning                        MetricConfig `mapstructure:"mysql.slave_sql_running"`
	MysqlSlowQueriesCount                       MetricConfig `mapstructure:"mysql.slow_queries.count"`
	MysqlSlowQueriesTotalTime                   MetricConfig `mapstructure:"mysql.slow_queries.total_time"`
	MysqlTableIoOperations                      MetricConfig `mapstructure:"mysql.table_io.operations"`
	MysqlTableIoWaitTime                        MetricConfig `mapstructure:"mysql.table_io.wait_time"`
	MysqlWaitEventsCount                        MetricConfig `mapstructure:"mysql.wait_events.count"`
	MysqlWaitEventsTotalTime                    MetricConfig `mapstructure:"mysql.wait_events.total_time"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		MysqlBlockedSessionsCount: MetricConfig{
			Enabled: true,
		},
		MysqlBlockedSessionsWaitTime: MetricConfig{
			Enabled: true,
		},
		MysqlBlockingSessionsCount: MetricConfig{
			Enabled: true,
		},
		MysqlBufferPoolDataPages: MetricConfig{
			Enabled: true,
		},
		MysqlBufferPoolLimit: MetricConfig{
			Enabled: true,
		},
		MysqlBufferPoolOperations: MetricConfig{
			Enabled: true,
		},
		MysqlBufferPoolPages: MetricConfig{
			Enabled: true,
		},
		MysqlBufferPoolUsage: MetricConfig{
			Enabled: true,
		},
		MysqlCommands: MetricConfig{
			Enabled: true,
		},
		MysqlConnectionCount: MetricConfig{
			Enabled: true,
		},
		MysqlConnectionErrors: MetricConfig{
			Enabled: true,
		},
		MysqlHandlers: MetricConfig{
			Enabled: true,
		},
		MysqlIndexIoOperations: MetricConfig{
			Enabled: true,
		},
		MysqlIndexIoWaitTime: MetricConfig{
			Enabled: true,
		},
		MysqlInnodbBufferPoolReadRequests: MetricConfig{
			Enabled: true,
		},
		MysqlInnodbBufferPoolReads: MetricConfig{
			Enabled: true,
		},
		MysqlInnodbBufferPoolWriteRequests: MetricConfig{
			Enabled: true,
		},
		MysqlInnodbDataRead: MetricConfig{
			Enabled: true,
		},
		MysqlInnodbDataReads: MetricConfig{
			Enabled: true,
		},
		MysqlInnodbDataWrites: MetricConfig{
			Enabled: true,
		},
		MysqlInnodbDataWritten: MetricConfig{
			Enabled: true,
		},
		MysqlPerformanceSchemaEventsStatementsTime: MetricConfig{
			Enabled: true,
		},
		MysqlPerformanceSchemaEventsStatementsTotal: MetricConfig{
			Enabled: true,
		},
		MysqlQueryAvgTime: MetricConfig{
			Enabled: true,
		},
		MysqlQueryExecutionCount: MetricConfig{
			Enabled: true,
		},
		MysqlQueryLockTime: MetricConfig{
			Enabled: true,
		},
		MysqlQueryMaxTime: MetricConfig{
			Enabled: true,
		},
		MysqlQueryMinTime: MetricConfig{
			Enabled: true,
		},
		MysqlQueryRowsExamined: MetricConfig{
			Enabled: true,
		},
		MysqlQueryRowsSent: MetricConfig{
			Enabled: true,
		},
		MysqlQueryTotalTime: MetricConfig{
			Enabled: true,
		},
		MysqlSlaveIoRunning: MetricConfig{
			Enabled: true,
		},
		MysqlSlaveLag: MetricConfig{
			Enabled: true,
		},
		MysqlSlaveSQLRunning: MetricConfig{
			Enabled: true,
		},
		MysqlSlowQueriesCount: MetricConfig{
			Enabled: true,
		},
		MysqlSlowQueriesTotalTime: MetricConfig{
			Enabled: true,
		},
		MysqlTableIoOperations: MetricConfig{
			Enabled: true,
		},
		MysqlTableIoWaitTime: MetricConfig{
			Enabled: true,
		},
		MysqlWaitEventsCount: MetricConfig{
			Enabled: true,
		},
		MysqlWaitEventsTotalTime: MetricConfig{
			Enabled: true,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
	// Experimental: MetricsInclude defines a list of filters for attribute values.
	// If the list is not empty, only metrics with matching resource attribute values will be emitted.
	MetricsInclude []filter.Config `mapstructure:"metrics_include"`
	// Experimental: MetricsExclude defines a list of filters for attribute values.
	// If the list is not empty, metrics with matching resource attribute values will not be emitted.
	// MetricsInclude has higher priority than MetricsExclude.
	MetricsExclude []filter.Config `mapstructure:"metrics_exclude"`

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for newrelicmysql resource attributes.
type ResourceAttributesConfig struct {
	MysqlInstanceEndpoint ResourceAttributeConfig `mapstructure:"mysql.instance.endpoint"`
	MysqlInstanceVersion  ResourceAttributeConfig `mapstructure:"mysql.instance.version"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		MysqlInstanceEndpoint: ResourceAttributeConfig{
			Enabled: true,
		},
		MysqlInstanceVersion: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for newrelicmysql metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsConfig            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesConfig `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsConfig(),
		ResourceAttributes: DefaultResourceAttributesConfig(),
	}
}
